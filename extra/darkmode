import React, { useEffect, useMemo, useRef, useState } from "react";
import axios from "../config/axios";
import { useNavigate } from "react-router-dom";
import Project from "./project.jsx";

const Home = () => {
  const [projectName, setProjectName] = useState("");
  const [error, setError] = useState("");
  const [projects, setProjects] = useState([]);
  const [projectsLoading, setProjectsLoading] = useState(false);
  const [listError, setListError] = useState("");
  const [selectedProject, setSelectedProject] = useState(null);
  const [isProjectPanelOpen, setIsProjectPanelOpen] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);

  // Chat state
  const [chatMessages, setChatMessages] = useState([]);
  const [chatInput, setChatInput] = useState("");

  const navigate = useNavigate();

  function fetchProjects() {
    setProjectsLoading(true);
    setListError("");
    axios
      .get("/project/getAll")
      .then((res) => {
        setProjects(res.data?.projects || []);
      })
      .catch(() => {
        setListError("Failed to fetch projects");
      })
      .finally(() => setProjectsLoading(false));
  }

  useEffect(() => {
    fetchProjects();
  }, []);

  function createProjectFromModal(e) {
    e.preventDefault();
    setError("");
    const name = projectName.trim();
    if (!name) {
      setError("Project name is required");
      return;
    }
    axios
      .post("/project/create", { name })
      .then(() => {
        setProjectName("");
        fetchProjects();
        setIsModalOpen(false);
      })
      .catch((err) => {
        const msg = err?.response?.data?.error || "Failed to create project";
        setError(msg);
      });
  }

  function openProject(projectId) {
    const basic = projects.find((p) => p._id === projectId);
    if (basic) {
      setSelectedProject({ _id: basic._id, name: basic.name });
    } else {
      setSelectedProject({ _id: projectId, name: "Project" });
    }
    setIsProjectPanelOpen(false);
  }

  const storageKey = useMemo(
    () => (selectedProject?._id ? `chat:${selectedProject._id}` : null),
    [selectedProject]
  );

  useEffect(() => {
    if (!storageKey) {
      setChatMessages([]);
      setChatInput("");
      return;
    }
    try {
      const stored = localStorage.getItem(storageKey);
      if (stored) {
        setChatMessages(JSON.parse(stored));
      } else {
        setChatMessages([
          {
            role: "assistant",
            text: `🌿 Welcome to ${selectedProject?.name || "this"}'s chat!`,
          },
        ]);
      }
      setChatInput("");
    } catch {
      setChatMessages([]);
      setChatInput("");
    }
  }, [storageKey]);

  useEffect(() => {
    if (!storageKey) return;
    try {
      localStorage.setItem(storageKey, JSON.stringify(chatMessages));
    } catch {}
  }, [chatMessages, storageKey]);

  function sendChatMessage() {
    const content = chatInput.trim();
    if (!content) return;
    setChatMessages((prev) => [...prev, { role: "user", text: content }]);
    setChatInput("");
    setTimeout(() => {
      setChatMessages((prev) => [
        ...prev,
        {
          role: "assistant",
          text: "✅ Got it! I'm here to help with your project.",
        },
      ]);
    }, 200);
  }

  const inputRef = useRef(null);
  useEffect(() => {
    if (!selectedProject || isModalOpen) return;
    const t = setTimeout(() => inputRef.current?.focus(), 220);
    return () => clearTimeout(t);
  }, [selectedProject, isModalOpen]);

  return (
    <main className="home min-h-screen p-6 grid grid-cols-3 gap-6 bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 text-gray-100">
      {/* Left: Chat */}
      <div className="col-span-1 max-w-sm space-y-6">
        <div className="mb-4">
          <button
            onClick={() => {
              setError("");
              setIsModalOpen(true);
            }}
            className="w-full bg-gradient-to-r from-emerald-500 to-teal-500 text-white px-6 py-3 rounded-2xl shadow-lg hover:scale-[1.02] active:scale-95 transition font-semibold"
          >
            + Create Project
          </button>
        </div>

        <div className="bg-gray-800/90 backdrop-blur-md rounded-2xl border border-gray-700 shadow-xl overflow-hidden">
          <div className="flex items-center justify-between px-4 py-3 border-b border-gray-700 bg-gray-900 font-semibold">
            <div>
              {selectedProject ? (
                <div className="min-w-0">
                  <p className="font-semibold truncate text-emerald-400">
                    💬 Chat: {selectedProject.name}
                  </p>
                  <p className="text-xs text-gray-400 truncate">
                    {selectedProject._id}
                  </p>
                </div>
              ) : (
                <p className="font-semibold text-emerald-400">💬 Chat</p>
              )}
            </div>
            <button
              onClick={() => setIsProjectPanelOpen(true)}
              className="inline-flex items-center justify-center w-10 h-10 rounded-xl border border-gray-700 bg-gray-700 hover:bg-gray-600 active:scale-95 transition"
            >
              <i className="ri-menu-line text-xl text-emerald-400" />
            </button>
          </div>

          <div className="h-[calc(100vh-160px)] flex flex-col">
            {selectedProject ? (
              <>
                <div className="flex-1 overflow-y-auto p-4 space-y-3 bg-gray-900">
                  {chatMessages.map((m, idx) => (
                    <div
                      key={idx}
                      className={`flex ${
                        m.role === "user" ? "justify-end" : "justify-start"
                      }`}
                    >
                      <div
                        className={`max-w-[80%] px-3 py-2 rounded-2xl shadow-sm transition-all ${
                          m.role === "user"
                            ? "bg-emerald-500 text-white rounded-br-none"
                            : "bg-gray-700 border border-gray-600 text-gray-200 rounded-bl-none"
                        }`}
                      >
                        {m.text}
                      </div>
                    </div>
                  ))}
                </div>
                <form
                  onSubmit={(e) => {
                    e.preventDefault();
                    sendChatMessage();
                    inputRef.current?.focus();
                  }}
                  className="p-3 border-t border-gray-700 bg-gray-800 flex gap-2"
                >
                  <input
                    value={chatInput}
                    onChange={(e) => setChatInput(e.target.value)}
                    ref={inputRef}
                    placeholder="Type a message"
                    className="flex-1 px-4 py-2 rounded-xl border border-gray-600 bg-gray-900 text-gray-200 placeholder-gray-400 focus:ring-2 focus:ring-emerald-500 outline-none shadow-sm"
                  />
                  <button
                    type="submit"
                    className="px-4 py-2 rounded-xl bg-emerald-500 text-white shadow-lg hover:bg-emerald-600"
                  >
                    Send
                  </button>
                </form>
              </>
            ) : (
              <div className="flex-1 grid place-items-center p-10 text-center text-gray-400">
                <p className="text-lg font-semibold">No project selected</p>
                <p className="text-sm">Click menu to open a project.</p>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Middle/Right */}
      <div className="col-span-2 bg-gray-800/80 rounded-2xl border border-gray-700 flex items-center justify-center text-gray-300 shadow-inner">
        <div className="text-center">
          <p className="font-semibold text-lg text-emerald-400">
            ✨ Your Plan Area
          </p>
          <p className="text-sm">Add your features here</p>
        </div>
      </div>

      {/* Slide Project Panel */}
      <Project
        isOpen={isProjectPanelOpen}
        onClose={() => setIsProjectPanelOpen(false)}
        projects={projects}
        projectsLoading={projectsLoading}
        listError={listError}
        onOpenProject={openProject}
        selectedProjectId={selectedProject?._id || null}
      />

      {/* Create Project Modal */}
      {isModalOpen && (
        <div className="fixed inset-0 flex items-center justify-center bg-black/40 z-60">
          <div className="bg-gray-800 p-6 rounded-2xl shadow-2xl w-full max-w-sm relative border border-gray-700">
            <button
              onClick={() => setIsModalOpen(false)}
              className="absolute top-3 right-3 text-gray-400 hover:text-gray-200"
            >
              ✕
            </button>
            <h2 className="text-xl font-bold mb-5 text-emerald-400 text-center">
              🚀 Create Project
            </h2>
            <form onSubmit={createProjectFromModal} className="space-y-4">
              <input
                type="text"
                value={projectName}
                onChange={(e) => setProjectName(e.target.value)}
                className={`w-full px-4 py-3 rounded-xl border ${
                  error ? "border-red-500" : "border-gray-600"
                } bg-gray-900 text-gray-200 placeholder-gray-400 focus:ring-2 focus:ring-emerald-500 outline-none shadow-sm`}
                placeholder="Enter Project Name"
                required
              />
              {error && (
                <p className="text-red-500 text-sm mt-1">{error}</p>
              )}
              <button
                type="submit"
                className="w-full bg-gradient-to-r from-emerald-500 to-teal-500 text-white py-3 rounded-xl hover:scale-[1.02] active:scale-95 transition"
              >
                Create Project
              </button>
            </form>
          </div>
        </div>
      )}
    </main>
  );
};

export default Home;

// project.jsx

import React, { useEffect } from "react";

const Project = ({
  isOpen,
  onClose,
  projects,
  projectsLoading,
  listError,
  onOpenProject,
  selectedProjectId,
}) => {
  // Close on ESC
  useEffect(() => {
    if (!isOpen) return;
    const handler = (e) => {
      if (e.key === "Escape") onClose?.();
    };
    window.addEventListener("keydown", handler);
    return () => window.removeEventListener("keydown", handler);
  }, [isOpen, onClose]);

  return (
    <>
      {isOpen && (
        <div
          className="fixed inset-0 bg-black/50 z-40"
          onClick={onClose}
        />
      )}

      <div
        className={`fixed top-0 left-0 h-full w-[360px] bg-gray-900/95 shadow-2xl border-r border-gray-700 transform transition-transform duration-400 ease-in-out z-50 rounded-r-2xl ${
          isOpen ? "translate-x-0" : "-translate-x-full"
        }`}
      >
        {/* Header */}
        <div className="flex items-center justify-between px-4 py-3 border-b border-gray-700 bg-gray-800 rounded-tr-2xl">
          <div className="font-semibold text-emerald-400">
            📁 Your Projects
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-200 transition"
          >
            ✕
          </button>
        </div>

        {/* Content */}
        <div className="h-[calc(100%-3.5rem)] flex flex-col px-3 pb-4 overflow-y-auto bg-gray-900">
          {projectsLoading ? (
            <p className="text-emerald-400 text-sm animate-pulse">
              Loading...
            </p>
          ) : listError ? (
            <p className="text-red-500 text-sm">{listError}</p>
          ) : projects.length === 0 ? (
            <p className="text-gray-400 text-sm italic">No projects yet</p>
          ) : (
            <ul className="space-y-3">
              {projects.map((p) => (
                <li
                  key={p._id}
                  className={`flex items-center justify-between bg-gray-800/90 backdrop-blur-md rounded-xl px-3 py-2 shadow-md border transition ${
                    selectedProjectId === p._id
                      ? "border-emerald-400"
                      : "border-gray-700 hover:border-gray-500"
                  }`}
                >
                  <div className="min-w-0">
                    <p className="font-semibold capitalize text-emerald-400 truncate">
                      {p.name}
                    </p>
                    <p className="text-xs text-gray-400 truncate">{p._id}</p>
                  </div>
                  <button
                    className="text-white bg-gradient-to-r from-emerald-500 to-teal-500 hover:scale-[1.02] active:scale-95 transition text-sm rounded-lg px-3 py-1 shadow-lg"
                    onClick={() => onOpenProject?.(p._id)}
                  >
                    Open
                  </button>
                </li>
              ))}
            </ul>
          )}
        </div>
      </div>
    </>
  );
};

export default Project;

